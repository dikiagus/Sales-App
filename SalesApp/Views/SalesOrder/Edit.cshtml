@model SalesApp.Models.ViewModels.SalesOrderViewModel

@{
    ViewData["Title"] = "Edit Sales Order";
}

<div class="container py-4">
    <div class="text-center mb-4">
        <h2 class="fw-bold text-primary"><i class="bi bi-pencil-square me-2"></i>Edit Sales Order</h2>
    </div>

    <form asp-action="Edit" method="post" class="shadow-sm p-4 rounded bg-light">
        <input type="hidden" name="Page" value="@ViewBag.Page" />

        <div class="row mb-3">
            <div class="col-md-6">
                <label asp-for="SalesOrderNumber" class="form-label fw-semibold"></label>
                <input asp-for="SalesOrderNumber" class="form-control" />
            </div>
            <div class="col-md-6">
                <label asp-for="OrderDate" class="form-label fw-semibold"></label>
                <input asp-for="OrderDate" class="form-control" type="date" />
            </div>
        </div>

        <div class="mb-3">
            <label asp-for="CustomerId" class="form-label fw-semibold"></label>
            <select asp-for="CustomerId" asp-items="Model.Customers" class="form-select"></select>
        </div>

        <div class="mb-3">
            <label asp-for="Address" class="form-label fw-semibold"></label>
            <input asp-for="Address" class="form-control" />
        </div>

        <h4 class="mt-4">Items</h4>
        <div class="table-responsive">
            <table class="table table-bordered table-striped">
                <thead class="table-dark text-center">
                    <tr>
                        <th>Action</th>
                        <th>Item Name</th>
                        <th>Qty</th>
                        <th>Price</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody id="itemsTable">
                    @for (int i = 0; i < Model.Items.Count; i++)
                    {
                        <tr>
                            <td class="text-center">
                                <button type="button" class="btn btn-sm btn-outline-primary edit-btn" onclick="editRow(this)" title="Edit"><i class="bi bi-pencil"></i></button>
                                <button type="button" class="btn btn-sm btn-outline-success save-btn d-none" onclick="saveRow(this)" title="Save"><i class="bi bi-check2-square"></i></button>
                                <button type="button" class="btn btn-sm btn-outline-secondary cancel-btn d-none" onclick="cancelEdit(this)" title="Cancel"><i class="bi bi-x-circle"></i></button>
                                <button type="button" class="btn btn-sm btn-outline-danger delete-btn" onclick="deleteRow(this)" title="Delete"><i class="bi bi-trash"></i></button>
                            </td>
                            <td><input name="Items[@i].ItemName" class="form-control" value="@Model.Items[i].ItemName" readonly /></td>
                            <td><input name="Items[@i].Qty" class="form-control" value="@Model.Items[i].Qty" readonly /></td>
                            <td><input name="Items[@i].Price" class="form-control" value="@Model.Items[i].Price" readonly /></td>
                            <td class="text-end pe-2">@(@Model.Items[i].Qty * @Model.Items[i].Price)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

    <div class="d-flex justify-content-center mt-3 align-items-center gap-2">
        <button type="button" class="btn btn-secondary" id="prevPageBtn">Previous</button>
        <div id="pageNumbers" class="btn-group"></div>
        <button type="button" class="btn btn-secondary" id="nextPageBtn">Next</button>
    </div>

    <div class="mt-3 d-flex justify-content-end">
    <button type="submit" class="btn btn-primary">Save</button>
    <a asp-action="Index" asp-route-page="@ViewBag.Page" class="btn btn-danger ms-3">Back</a>
    </div>

</form>

<!-- Konfirmasi Delete Modal -->
<div class="modal fade" id="deleteItemModal" tabindex="-1" aria-labelledby="deleteItemModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content text-center">
            <div class="modal-body">
                <i class="bi bi-question-circle-fill" style="font-size: 60px; color: red;"></i>
                <p>Are you sure you want to delete this item?</p>
                <div class="d-flex justify-content-center mt-3">
                    <button type="button" class="btn btn-danger me-2" id="confirmDeleteBtn">Yes</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Alert Notifikasi -->
<div id="deleteSuccessAlert" class="alert alert-success d-none position-fixed top-50 start-50 translate-middle text-center p-4" style="z-index: 1050;">
    <div class="fs-1">✅</div>
    <div class="mt-2">Data berhasil dihapus!</div>
</div>


@section Scripts {
    <script>
        function editRow(btn) {
            const row = btn.closest("tr");

            // Simpan data awal ke dataset (biar bisa dikembalikan saat cancel)
            row.querySelectorAll("input").forEach(input => {
                input.dataset.originalValue = input.value;
                input.removeAttribute("readonly");
            });

            // Toggle tombol
            row.querySelector(".edit-btn").classList.add("d-none");
            row.querySelector(".delete-btn").classList.add("d-none");
            row.querySelector(".save-btn").classList.remove("d-none");
            row.querySelector(".cancel-btn").classList.remove("d-none");
        }

        function saveRow(btn) {
            const row = btn.closest("tr");

            // Kunci input lagi
            row.querySelectorAll("input").forEach(input => {
                input.setAttribute("readonly", "readonly");
            });

            // Toggle tombol
            row.querySelector(".edit-btn").classList.remove("d-none");
            row.querySelector(".delete-btn").classList.remove("d-none");
            row.querySelector(".save-btn").classList.add("d-none");
            row.querySelector(".cancel-btn").classList.add("d-none");
        }

        function cancelEdit(btn) {
            const row = btn.closest("tr");

            // Kembalikan data lama dari dataset
            row.querySelectorAll("input").forEach(input => {
                input.value = input.dataset.originalValue;
                input.setAttribute("readonly", "readonly");
            });

            // Toggle tombol
            row.querySelector(".edit-btn").classList.remove("d-none");
            row.querySelector(".delete-btn").classList.remove("d-none");
            row.querySelector(".save-btn").classList.add("d-none");
            row.querySelector(".cancel-btn").classList.add("d-none");
        }

        let rowToDelete = null;

        function deleteRow(btn) {
            rowToDelete = btn.closest("tr");
            const modal = new bootstrap.Modal(document.getElementById('deleteItemModal'));
            modal.show();
        }

        document.getElementById("confirmDeleteBtn").addEventListener("click", function () {
            if (rowToDelete) {
                rowToDelete.remove();
                rowToDelete = null;

                // Tutup modal
                const modalElement = document.getElementById('deleteItemModal');
                const modalInstance = bootstrap.Modal.getInstance(modalElement);
                modalInstance.hide();

                // Tampilkan alert sukses
                const alertBox = document.getElementById('deleteSuccessAlert');
                alertBox.classList.remove("d-none");

                // Sembunyikan alert setelah 2 detik
                setTimeout(() => {
                    alertBox.classList.add("d-none");
                }, 2000);
            }
        });


        const itemsPerPage = 5;
        let currentPage = 1;

        function renderItemsPage() {
            const rows = document.querySelectorAll("#itemsTable tr");
            const totalPages = Math.ceil(rows.length / itemsPerPage);

            rows.forEach((row, index) => {
                const start = (currentPage - 1) * itemsPerPage;
                const end = currentPage * itemsPerPage;
                row.style.display = (index >= start && index < end) ? "" : "none";
            });

            document.getElementById("prevPageBtn").disabled = currentPage === 1;
            document.getElementById("nextPageBtn").disabled = currentPage === totalPages || totalPages === 0;

            renderPageNumbers(totalPages);
        }

        function renderPageNumbers(totalPages) {
            const pageNumbersDiv = document.getElementById("pageNumbers");
            pageNumbersDiv.innerHTML = "";

            for (let i = 1; i <= totalPages; i++) {
                const btn = document.createElement("button");
                btn.innerText = i;
                btn.className = "btn btn-outline-primary";
                if (i === currentPage) {
                    btn.classList.add("active");
                }

                btn.addEventListener("click", () => {
                    currentPage = i;
                    renderItemsPage();
                });

                pageNumbersDiv.appendChild(btn);
            }
        }

        document.getElementById("prevPageBtn").addEventListener("click", () => {
            if (currentPage > 1) {
                currentPage--;
                renderItemsPage();
            }
        });

        document.getElementById("nextPageBtn").addEventListener("click", () => {
            const rows = document.querySelectorAll("#itemsTable tr");
            const totalPages = Math.ceil(rows.length / itemsPerPage);

            if (currentPage < totalPages) {
                currentPage++;
                renderItemsPage();
            }
        });

        renderItemsPage(); // inisialisasi saat halaman load
    </script>

}

